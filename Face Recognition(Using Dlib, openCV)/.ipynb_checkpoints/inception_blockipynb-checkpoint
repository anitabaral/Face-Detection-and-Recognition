{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Conv2D, ZeroPadding2D, Activation, Input, concatenate, AveragePooling2D, MaxPooling2D, BatchNormalization\n",
    "from tensorflow.keras.layers import Lambda, Flatten, Dense\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras import backend as K\n",
    "\n",
    "import utils\n",
    "from utils import LRN2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "\n",
    "    myInput = Input(shape=(96, 96, 3))\n",
    "\n",
    "    x = ZeroPadding2D(padding=(3, 3), input_shape=(96, 96, 3))(myInput)\n",
    "    x = Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)\n",
    "    x = BatchNormalization(axis=3, epsilon=0.00001, name='bn1')(x)\n",
    "    x = Activation('relu')(x)\n",
    "    x = ZeroPadding2D(padding=(1, 1))(x)\n",
    "    x = MaxPooling2D(pool_size=3, strides=2)(x)\n",
    "    x = Lambda(LRN2D, name='lrn_1')(x)\n",
    "    x = Conv2D(64, (1, 1), name='conv2')(x)\n",
    "    x = BatchNormalization(axis=3, epsilon=0.00001, name='bn2')(x)\n",
    "    x = Activation('relu')(x)\n",
    "    x = ZeroPadding2D(padding=(1, 1))(x)\n",
    "    x = Conv2D(192, (3, 3), name='conv3')(x)\n",
    "    x = BatchNormalization(axis=3, epsilon=0.00001, name='bn3')(x)\n",
    "    x = Activation('relu')(x)\n",
    "    x = Lambda(LRN2D, name='lrn_2')(x)\n",
    "    x = ZeroPadding2D(padding=(1, 1))(x)\n",
    "    x = MaxPooling2D(pool_size=3, strides=2)(x)\n",
    "\n",
    "    # Inception3a\n",
    "    inception_3a_3x3 = Conv2D(96, (1, 1), name='inception_3a_3x3_conv1')(x)\n",
    "    inception_3a_3x3 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3a_3x3_bn1')(inception_3a_3x3)\n",
    "    inception_3a_3x3 = Activation('relu')(inception_3a_3x3)\n",
    "    inception_3a_3x3 = ZeroPadding2D(padding=(1, 1))(inception_3a_3x3)\n",
    "    inception_3a_3x3 = Conv2D(128, (3, 3),\n",
    "                              name='inception_3a_3x3_conv2')(inception_3a_3x3)\n",
    "    inception_3a_3x3 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3a_3x3_bn2')(inception_3a_3x3)\n",
    "    inception_3a_3x3 = Activation('relu')(inception_3a_3x3)\n",
    "\n",
    "    inception_3a_5x5 = Conv2D(16, (1, 1), name='inception_3a_5x5_conv1')(x)\n",
    "    inception_3a_5x5 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3a_5x5_bn1')(inception_3a_5x5)\n",
    "    inception_3a_5x5 = Activation('relu')(inception_3a_5x5)\n",
    "    inception_3a_5x5 = ZeroPadding2D(padding=(2, 2))(inception_3a_5x5)\n",
    "    inception_3a_5x5 = Conv2D(32, (5, 5),\n",
    "                              name='inception_3a_5x5_conv2')(inception_3a_5x5)\n",
    "    inception_3a_5x5 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3a_5x5_bn2')(inception_3a_5x5)\n",
    "    inception_3a_5x5 = Activation('relu')(inception_3a_5x5)\n",
    "\n",
    "    inception_3a_pool = MaxPooling2D(pool_size=3, strides=2)(x)\n",
    "    inception_3a_pool = Conv2D(\n",
    "        32, (1, 1), name='inception_3a_pool_conv')(inception_3a_pool)\n",
    "    inception_3a_pool = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001,\n",
    "        name='inception_3a_pool_bn')(inception_3a_pool)\n",
    "    inception_3a_pool = Activation('relu')(inception_3a_pool)\n",
    "    inception_3a_pool = ZeroPadding2D(padding=((3, 4), (3,\n",
    "                                                        4)))(inception_3a_pool)\n",
    "\n",
    "    inception_3a_1x1 = Conv2D(64, (1, 1), name='inception_3a_1x1_conv')(x)\n",
    "    inception_3a_1x1 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3a_1x1_bn')(inception_3a_1x1)\n",
    "    inception_3a_1x1 = Activation('relu')(inception_3a_1x1)\n",
    "\n",
    "    inception_3a = concatenate([\n",
    "        inception_3a_3x3, inception_3a_5x5, inception_3a_pool, inception_3a_1x1\n",
    "    ],\n",
    "                               axis=3)\n",
    "\n",
    "    # Inception3b\n",
    "    inception_3b_3x3 = Conv2D(96, (1, 1),\n",
    "                              name='inception_3b_3x3_conv1')(inception_3a)\n",
    "    inception_3b_3x3 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3b_3x3_bn1')(inception_3b_3x3)\n",
    "    inception_3b_3x3 = Activation('relu')(inception_3b_3x3)\n",
    "    inception_3b_3x3 = ZeroPadding2D(padding=(1, 1))(inception_3b_3x3)\n",
    "    inception_3b_3x3 = Conv2D(128, (3, 3),\n",
    "                              name='inception_3b_3x3_conv2')(inception_3b_3x3)\n",
    "    inception_3b_3x3 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3b_3x3_bn2')(inception_3b_3x3)\n",
    "    inception_3b_3x3 = Activation('relu')(inception_3b_3x3)\n",
    "\n",
    "    inception_3b_5x5 = Conv2D(32, (1, 1),\n",
    "                              name='inception_3b_5x5_conv1')(inception_3a)\n",
    "    inception_3b_5x5 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3b_5x5_bn1')(inception_3b_5x5)\n",
    "    inception_3b_5x5 = Activation('relu')(inception_3b_5x5)\n",
    "    inception_3b_5x5 = ZeroPadding2D(padding=(2, 2))(inception_3b_5x5)\n",
    "    inception_3b_5x5 = Conv2D(64, (5, 5),\n",
    "                              name='inception_3b_5x5_conv2')(inception_3b_5x5)\n",
    "    inception_3b_5x5 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3b_5x5_bn2')(inception_3b_5x5)\n",
    "    inception_3b_5x5 = Activation('relu')(inception_3b_5x5)\n",
    "\n",
    "    inception_3b_pool = AveragePooling2D(pool_size=(3, 3),\n",
    "                                         strides=(3, 3))(inception_3a)\n",
    "    inception_3b_pool = Conv2D(\n",
    "        64, (1, 1), name='inception_3b_pool_conv')(inception_3b_pool)\n",
    "    inception_3b_pool = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001,\n",
    "        name='inception_3b_pool_bn')(inception_3b_pool)\n",
    "    inception_3b_pool = Activation('relu')(inception_3b_pool)\n",
    "    inception_3b_pool = ZeroPadding2D(padding=(4, 4))(inception_3b_pool)\n",
    "\n",
    "    inception_3b_1x1 = Conv2D(64, (1, 1),\n",
    "                              name='inception_3b_1x1_conv')(inception_3a)\n",
    "    inception_3b_1x1 = BatchNormalization(\n",
    "        axis=3, epsilon=0.00001, name='inception_3b_1x1_bn')(inception_3b_1x1)\n",
    "    inception_3b_1x1 = Activation('relu')(inception_3b_1x1)\n",
    "\n",
    "    inception_3b = concatenate([\n",
    "        inception_3b_3x3, inception_3b_5x5, inception_3b_pool, inception_3b_1x1\n",
    "    ],\n",
    "                               axis=3)\n",
    "\n",
    "    # Inception3c\n",
    "    inception_3c_3x3 = utils.conv2d_bn(inception_3b,\n",
    "                                       layer='inception_3c_3x3',\n",
    "                                       cv1_out=128,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=256,\n",
    "                                       cv2_filter=(3, 3),\n",
    "                                       cv2_strides=(2, 2),\n",
    "                                       padding=(1, 1))\n",
    "\n",
    "    inception_3c_5x5 = utils.conv2d_bn(inception_3b,\n",
    "                                       layer='inception_3c_5x5',\n",
    "                                       cv1_out=32,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=64,\n",
    "                                       cv2_filter=(5, 5),\n",
    "                                       cv2_strides=(2, 2),\n",
    "                                       padding=(2, 2))\n",
    "\n",
    "    inception_3c_pool = MaxPooling2D(pool_size=3, strides=2)(inception_3b)\n",
    "    inception_3c_pool = ZeroPadding2D(padding=((0, 1), (0,\n",
    "                                                        1)))(inception_3c_pool)\n",
    "\n",
    "    inception_3c = concatenate(\n",
    "        [inception_3c_3x3, inception_3c_5x5, inception_3c_pool], axis=3)\n",
    "\n",
    "    #inception 4a\n",
    "    inception_4a_3x3 = utils.conv2d_bn(inception_3c,\n",
    "                                       layer='inception_4a_3x3',\n",
    "                                       cv1_out=96,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=192,\n",
    "                                       cv2_filter=(3, 3),\n",
    "                                       cv2_strides=(1, 1),\n",
    "                                       padding=(1, 1))\n",
    "    inception_4a_5x5 = utils.conv2d_bn(inception_3c,\n",
    "                                       layer='inception_4a_5x5',\n",
    "                                       cv1_out=32,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=64,\n",
    "                                       cv2_filter=(5, 5),\n",
    "                                       cv2_strides=(1, 1),\n",
    "                                       padding=(2, 2))\n",
    "\n",
    "    inception_4a_pool = AveragePooling2D(pool_size=(3, 3),\n",
    "                                         strides=(3, 3))(inception_3c)\n",
    "    inception_4a_pool = utils.conv2d_bn(inception_4a_pool,\n",
    "                                        layer='inception_4a_pool',\n",
    "                                        cv1_out=128,\n",
    "                                        cv1_filter=(1, 1),\n",
    "                                        padding=(2, 2))\n",
    "    inception_4a_1x1 = utils.conv2d_bn(inception_3c,\n",
    "                                       layer='inception_4a_1x1',\n",
    "                                       cv1_out=256,\n",
    "                                       cv1_filter=(1, 1))\n",
    "    inception_4a = concatenate([\n",
    "        inception_4a_3x3, inception_4a_5x5, inception_4a_pool, inception_4a_1x1\n",
    "    ],\n",
    "                               axis=3)\n",
    "\n",
    "    #inception4e\n",
    "    inception_4e_3x3 = utils.conv2d_bn(inception_4a,\n",
    "                                       layer='inception_4e_3x3',\n",
    "                                       cv1_out=160,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=256,\n",
    "                                       cv2_filter=(3, 3),\n",
    "                                       cv2_strides=(2, 2),\n",
    "                                       padding=(1, 1))\n",
    "    inception_4e_5x5 = utils.conv2d_bn(inception_4a,\n",
    "                                       layer='inception_4e_5x5',\n",
    "                                       cv1_out=64,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=128,\n",
    "                                       cv2_filter=(5, 5),\n",
    "                                       cv2_strides=(2, 2),\n",
    "                                       padding=(2, 2))\n",
    "    inception_4e_pool = MaxPooling2D(pool_size=3, strides=2)(inception_4a)\n",
    "    inception_4e_pool = ZeroPadding2D(padding=((0, 1), (0,\n",
    "                                                        1)))(inception_4e_pool)\n",
    "\n",
    "    inception_4e = concatenate(\n",
    "        [inception_4e_3x3, inception_4e_5x5, inception_4e_pool], axis=3)\n",
    "\n",
    "    #inception5a\n",
    "    inception_5a_3x3 = utils.conv2d_bn(inception_4e,\n",
    "                                       layer='inception_5a_3x3',\n",
    "                                       cv1_out=96,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=384,\n",
    "                                       cv2_filter=(3, 3),\n",
    "                                       cv2_strides=(1, 1),\n",
    "                                       padding=(1, 1))\n",
    "\n",
    "    inception_5a_pool = AveragePooling2D(pool_size=(3, 3),\n",
    "                                         strides=(3, 3))(inception_4e)\n",
    "    inception_5a_pool = utils.conv2d_bn(inception_5a_pool,\n",
    "                                        layer='inception_5a_pool',\n",
    "                                        cv1_out=96,\n",
    "                                        cv1_filter=(1, 1),\n",
    "                                        padding=(1, 1))\n",
    "    inception_5a_1x1 = utils.conv2d_bn(inception_4e,\n",
    "                                       layer='inception_5a_1x1',\n",
    "                                       cv1_out=256,\n",
    "                                       cv1_filter=(1, 1))\n",
    "\n",
    "    inception_5a = concatenate(\n",
    "        [inception_5a_3x3, inception_5a_pool, inception_5a_1x1], axis=3)\n",
    "\n",
    "    #inception_5b\n",
    "    inception_5b_3x3 = utils.conv2d_bn(inception_5a,\n",
    "                                       layer='inception_5b_3x3',\n",
    "                                       cv1_out=96,\n",
    "                                       cv1_filter=(1, 1),\n",
    "                                       cv2_out=384,\n",
    "                                       cv2_filter=(3, 3),\n",
    "                                       cv2_strides=(1, 1),\n",
    "                                       padding=(1, 1))\n",
    "    inception_5b_pool = MaxPooling2D(pool_size=3, strides=2)(inception_5a)\n",
    "    inception_5b_pool = utils.conv2d_bn(inception_5b_pool,\n",
    "                                        layer='inception_5b_pool',\n",
    "                                        cv1_out=96,\n",
    "                                        cv1_filter=(1, 1))\n",
    "    inception_5b_pool = ZeroPadding2D(padding=(1, 1))(inception_5b_pool)\n",
    "\n",
    "    inception_5b_1x1 = utils.conv2d_bn(inception_5a,\n",
    "                                       layer='inception_5b_1x1',\n",
    "                                       cv1_out=256,\n",
    "                                       cv1_filter=(1, 1))\n",
    "    inception_5b = concatenate(\n",
    "        [inception_5b_3x3, inception_5b_pool, inception_5b_1x1], axis=3)\n",
    "\n",
    "    av_pool = AveragePooling2D(pool_size=(3, 3), strides=(1, 1))(inception_5b)\n",
    "    reshape_layer = Flatten()(av_pool)\n",
    "    dense_layer = Dense(128, name='dense_layer')(reshape_layer)\n",
    "    norm_layer = Lambda(lambda x: K.l2_normalize(x, axis=1),\n",
    "                        name='norm_layer')(dense_layer)\n",
    "\n",
    "    return Model(inputs=[myInput], outputs=norm_layer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.engine.functional.Functional at 0x1b25c8dec50>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "create_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
